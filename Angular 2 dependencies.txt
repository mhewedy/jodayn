// ***********************
// Complements the training Angular 2 - (C) 2016 - Peter Kassenaar <info@kassenaar.com>
//
// Use these snippets to quickly compose an Angular 2
// boilerplate project / simple Hello World
// ***********************



// *******************
// Step 0. install NodeJS if necessary
// *******************

- open a command line window and type node --version
- it should respond with a version number equal, or higher than v4. (version 0.10-0.12 is NOT OK)
- if not: go to https://nodejs.org/en/ and install the version for your platform (Mac, Windows or Linux)

// *******************
// Step 1. Boilerplate code 
// *******************

// 1. package.json - inside de rootfolder of your app 
{
  "name"           : "ng2-base",
  "version"        : "1.0.0",
  "scripts"        : {
	"start"      : "tsc && concurrently \"npm run tsc:w\" \"npm run lite\" ",
	"lite"       : "lite-server",
	"postinstall": "typings install",
	"tsc"        : "tsc",
	"tsc:w"      : "tsc -w",
	"typings"    : "typings"
  },
  "license"        : "ISC",
  "dependencies"   : {
	"@angular/common"                  : "2.0.0",
	"@angular/compiler"                : "2.0.0",
	"@angular/core"                    : "2.0.0",
	"@angular/forms"                   : "2.0.0",
	"@angular/http"                    : "2.0.0",
	"@angular/platform-browser"        : "2.0.0",
	"@angular/platform-browser-dynamic": "2.0.0",
	"@angular/router"                  : "3.0.0",
	"@angular/upgrade"                 : "2.0.0",
	"core-js"                          : "^2.4.1",
	"reflect-metadata"                 : "^0.1.3",
	"rxjs"                             : "5.0.0-beta.12",
	"systemjs"                         : "0.19.27",
	"zone.js"                          : "^0.6.23",
	"angular2-in-memory-web-api"       : "0.0.20",
	"bootstrap"                        : "^3.3.6"
  },
  "devDependencies": {
	"concurrently": "^2.2.0",
	"lite-server" : "^2.2.2",
	"typescript"  : "^2.0.2",
	"typings"     : "^1.3.2"
  },
  "author"         : "Peter Kassenaar <info@kassenaar.com>"
}


// 2. tsconfig.json - inside de root of your project.
{
  "compilerOptions": {
	"target"                : "es5",
	"module"                : "commonjs",
	"moduleResolution"      : "node",
	"sourceMap"             : true,
	"emitDecoratorMetadata" : true,
	"experimentalDecorators": true,
	"removeComments"        : false,
	"noImplicitAny"         : false
  }
}


// 3. typings.json - inside the root of your project
{
  "globalDependencies": {
	"core-js": "registry:dt/core-js#0.0.0+20160725163759",
	"jasmine": "registry:dt/jasmine#2.2.0+20160621224255",
	"node"   : "registry:dt/node#6.0.0+20160909174046"
  }
}


// 4. systemjs.config.js - inside the root of your project
/**
 * System configuration for Angular 2 samples
 * Adjust as necessary for your application needs.
 */
(function (global) {
	System.config({
		paths    : {
			// paths serve as alias
			'npm:' : 'node_modules/'
		},
		// map tells the System loader where to look for things
		map      : {
			// our app is within the app folder
			app                                 : 'app',
			// angular bundles
			'@angular/core'                     : 'npm:@angular/core/bundles/core.umd.js',
			'@angular/common'                   : 'npm:@angular/common/bundles/common.umd.js',
			'@angular/compiler'                 : 'npm:@angular/compiler/bundles/compiler.umd.js',
			'@angular/platform-browser'         : 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',
			'@angular/platform-browser-dynamic' : 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',
			'@angular/http'                     : 'npm:@angular/http/bundles/http.umd.js',
			'@angular/router'                   : 'npm:@angular/router/bundles/router.umd.js',
			'@angular/forms'                    : 'npm:@angular/forms/bundles/forms.umd.js',
			// other libraries
			'rxjs'                              : 'npm:rxjs',
			'angular2-in-memory-web-api'        : 'npm:angular2-in-memory-web-api',
		},
		// packages tells the System loader how to load when no filename and/or no extension
		packages : {
			app                          : {
				main             : './main.js',
				defaultExtension : 'js'
			},
			rxjs                         : {
				defaultExtension : 'js'
			},
			'angular2-in-memory-web-api' : {
				main             : './index.js',
				defaultExtension : 'js'
			}
		}
	});
})(this);




// *******************
// Step 2. Create Component 
// *******************

// 5. Create a new Component file - app/app.component.ts
import {Component} from '@angular/core';

@Component({
	// 1. add component description/annotations here
	selector: 'hello-world',
	template: `
		<h1>Hello World!</h1>
		<h2>This is Angular 2</h2>
	`
})

export class AppComponent {
	// optional: add constructor, class logic, etc. here
}

// *******************
// Step 3. Write Module 
// app/app.module.ts
// *******************
// Angular Modules
import {NgModule}      from '@angular/core';
import {BrowserModule} from '@angular/platform-browser';

// Custom Components
import {AppComponent} from './app.component';

// Module declaration
@NgModule({
    imports: [BrowserModule],
    declarations: [AppComponent],
    bootstrap: [AppComponent]
})
export class AppModule {
}


// *******************
// Step 4. Write Bootstrapper 
// app/main.ts
// *******************

// 1. Import bootstrapping dependencies
import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';

// 2. Import or own  module
import {AppModule} from './app.module';

// 3. Bootstrap our app
platformBrowserDynamic().bootstrapModule(AppModule);



// *******************
// Step 5. Write Index.html 
// *******************
// 7. Index.html - in the root of your project. In the header:
<html>
<head>
    <title>Angular 2 Base Project</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="UTF-8">

    <!-- 1. Load libraries -->
    <!-- Polyfill(s) for older browsers -->
    <script src="node_modules/core-js/client/shim.min.js"></script>
    <script src="node_modules/zone.js/dist/zone.js"></script>
    <script src="node_modules/reflect-metadata/Reflect.js"></script>
    <script src="node_modules/systemjs/dist/system.src.js"></script>

    <!-- 2. Configure SystemJS -->
    <script src="systemjs.config.js"></script>
    <script>
        System.import('app').catch(function (err) {
            console.error(err);
        });
    </script>
    <!-- 3. Add some styling -->
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
</head>


// 8. Content of index.html - in de <body>
<!-- 4. Load the application -->
<body>
<div class="container">
    <hello-world>
        Loading ...
    </hello-world>
</div>
</body>
</html>


// *******************
// Step 6. Putting it all together: Testen if it works
// *******************

// 9. Run your App - in command line window

npm start
